use { assert, println } from "std::debug";

pub struct Base64Encoder {
    alphabetChars: string,
    padChar: char?,
}

pub const BASE64_ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
pub const BASE64_URL_ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

impl Base64Encoder {
    pub fn new(alphabet: string, padChar: char?) -> anytype {
        assert(alphabet.len() == 64, "Base64 alphabet must be exactly 64 characters long");

        return Base64Encoder {
            alphabetChars: alphabet,
            padChar: padChar,
        };
    }

   pub fn calc_size(self, len: int) -> int {
        if self.padChar == null {
            return (len + 2) / 3 * 4;
        } else {
            return ((len * 8 + 5) / 6 + 3) / 4 * 4;
        }
    }

    pub fn encode(self, source: string) -> string {
        let output = "";
        let bits = 0;
        let bitCount = 0;

        let chars = source.chars();
        let index = 0;

        while index < source.len() {
            let c = chars[index].to_int();
            bits = (bits << 8) | c;
            bitCount += 8;

            while bitCount >= 6 {
                let idx = (bits >> (bitCount - 6)) & 63;
                output += self.alphabetChars[idx];
                bitCount -= 6;
            }

            index += 1;
        }

        if bitCount > 0 {
            let idx = (bits << (6 - bitCount)) & 63;
            output += self.alphabetChars[idx];
        }

        while output.len() % 4 != 0 {
            output += self.padChar then self.padChar else "";
        }

        return output;
    }
}

pub const base64 = Base64Encoder::new(BASE64_ALPHABET, '=');
pub const base64_no_pad = Base64Encoder::new(BASE64_ALPHABET);
pub const base64_url = Base64Encoder::new(BASE64_URL_ALPHABET, '=');
pub const base64_url_no_pad = Base64Encoder::new(BASE64_URL_ALPHABET);