use { format } from "./format.roan";
use { panic } from "./lib.roan";

/// Prints the given message to the standard output.
///
/// # Parameters
/// - `msg`: The main message to print.
/// - `args`: Additional arguments to format into the message.
///
/// If no additional arguments are passed, the message is printed as-is. Otherwise, the message is formatted with the provided arguments.
pub fn print(msg: string, ...args: anytype) -> void {
    if args.len() == 0 {
        __print(msg);
    } else {
        __print(format(msg, ...args));
    }

    return;
}

/// Prints the given message to the standard output, followed by a newline.
///
/// # Parameters
/// - `msg`: The main message to print.
/// - `args`: Additional arguments to format into the message.
///
/// Similar to `print`, but automatically adds a newline after the output.
pub fn println(msg: string, ...args: anytype) -> void {
    print(msg, ...args);
    print("\n");
}

/// Prints the given message to the error output.
///
/// # Parameters
/// - `msg`: The main message to print to the error output.
/// - `args`: Additional arguments to format into the message.
///
/// If no additional arguments are passed, the message is printed as-is. Otherwise, the message is formatted with the provided arguments.
pub fn eprint(msg: string, ...args: anytype) -> void {
    if args.len() == 0 {
        __eprint(msg);
    } else {
        __eprint(format(msg, ...args));
    }

    return;
}

/// Prints the given message to the error output, followed by a newline.
///
/// # Parameters
/// - `msg`: The main message to print to the error output.
/// - `args`: Additional arguments to format into the message.
///
/// Similar to `eprint`, but automatically adds a newline after the output.
pub fn eprintln(msg: string, ...args: anytype) -> void {
    eprint(msg, ...args);
    eprint("\n");
}

/// A trait for types that can be formatted for debugging.
///
/// # Returns
/// - A string representation of the value for debugging purposes.
pub trait Debug {
    pub fn fmt(self) -> string;
}

/// Asserts that a condition is true.
///
/// # Parameters
/// - `cond`: The condition to check.
/// - `msg`: The message to print if the condition is false.
///
/// If the condition is false, the message is printed to the standard error output and the program is aborted.
pub fn assert(cond: bool, msg: string?, ...args: anytype) -> void {
    msg = msg then format("assertion failed: {}", msg, ...args) else "assertion failed";

    if !cond {
        panic(msg);
    }

    return;
}